<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2025/08/22/%E5%B7%A5%E6%8E%A7%E6%9C%BACAN%E9%85%8D%E7%BD%AE%E6%97%A5%E5%BF%97/"/>
    <url>/2025/08/22/%E5%B7%A5%E6%8E%A7%E6%9C%BACAN%E9%85%8D%E7%BD%AE%E6%97%A5%E5%BF%97/</url>
    
    <content type="html"><![CDATA[<p>省流：</p><p>逆天厂商无法给出CAN板的开发手册，其工作逻辑和数据处理方案完全不知，导致浪费时间一个个波特率去试，而且还试不出来。最终厂商也未能给出个最终说法。</p><p>因此购买了基于PCAN的收发板，与过往Orin代码完全兼容的折中办法。</p><h1 id="CAN子板方案综述"><a href="#CAN子板方案综述" class="headerlink" title="CAN子板方案综述"></a>CAN子板方案综述</h1><p>一般市面上能购买的有以下三种</p><h2 id="串口CAN（-dev-ttyS"><a href="#串口CAN（-dev-ttyS" class="headerlink" title="串口CAN（&#x2F;dev&#x2F;ttyS*)"></a>串口CAN（&#x2F;dev&#x2F;ttyS*)</h2><p>串口一般就是COM口。串口可以从USB转串口（CH340芯片）得到，也可以从机内某些地方引出。</p><p>CAN收发芯片从串口得到数据后，会根据设定的模式去处理串口数据，反之同理。比如有透传（给串口的数据加一个固定的ID）、包模式（自己控制整个CAN帧的内容）、ModBus等等。比如下面的透传模式的示例图，这就很清晰明了要发什么数据了。</p><p><img src="/images/image.png"></p><p>选型示例：泥人科技的USB-CAN。上面的手册就是它家的。结构实质上是CH340+CAN收发芯片。</p><p><img src="/images/image-1.png"></p><p>好处：非常简单，你只用管串口就是了。如果是从零开始我觉得不错。前提是有好的文档。</p><p>缺点：CAN帧缓存小，比如上面那个只能缓存200帧，极限情况下如果堵车了，先进先出可能会丢数据（没听到过以前有这种情况）。</p><h2 id="USB-CAN-dev-USBCAN"><a href="#USB-CAN-dev-USBCAN" class="headerlink" title="USB-CAN(&#x2F;dev&#x2F;USBCAN*)"></a>USB-CAN(&#x2F;dev&#x2F;USBCAN*)</h2><p>顾名思义，这一个CAN设备直接是完全的USB设备，开发时也只要往物理USB设备丢数据。</p><p>选型示例：<a href="https://github.com/SOULDE-Studio/USB2CAN/_ROS?tab=readme-ov-file">https://github.com/SOULDE-Studio/USB2CAN\_ROS?tab=readme-ov-file</a></p><p>好处：这个卖家提供了很多机器人、ROS的示例，看起来很可靠。</p><p><img src="/images/image-11.png"></p><p>坏处：需要它的第三方库实现与设备的通信。</p><h2 id="PCAN（can0、can-untils"><a href="#PCAN（can0、can-untils" class="headerlink" title="PCAN（can0、can-untils)"></a>PCAN（can0、can-untils)</h2><p>上赛季所用的方案。与socketCAN配合使用。因为本赛季逆天的工控机厂商，目前也打算采取这个办法。</p><p>最大的特点是直接能被识别到为can设备。很有安全感。</p><p><img src="/images/image-10.png"></p><p>socketCAN是ROS官方的CAN功能包<a href="https://wiki.ros.org/socketcan/_interface?distro=noetic%EF%BC%8C%E9%9C%80%E8%A6%81%E7%89%B9%E5%AE%9A%E5%8E%82%E5%95%86%E6%89%8D%E8%83%BD%E6%94%AF%E6%8C%81%E3%80%82%E5%85%B6%E4%B8%AD%EF%BC%8CPCAN%EF%BC%88%E4%B9%9F%E5%8F%ABPEAK-CAN%EF%BC%89%E5%B0%B1%E8%A2%AB%E6%94%AF%E6%8C%81%E3%80%82">https://wiki.ros.org/socketcan\_interface?distro=noetic，需要特定厂商才能支持。其中，PCAN（也叫PEAK-CAN）就被支持。</a></p><p><img src="/images/1524d013d8a8693d3ad5b59f4a89e83.png"></p><p>选型示例：挺多的。注意需要带隔离的，不然按照24赛季主控哥的说法，总线芯片断电状态下会把整车can网络拉低（电压降低。虽然CAN网络依靠压差来运行，具备一定的抗干扰能力）</p><p><img src="/images/image-2.png"></p><p>好处：与Orin代码完全兼容（理论上）</p><p>坏处：得有socketCAN的基础</p><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>2025赛季更换为X86架构的工控机，CAN实现方案与Orin基本不同。</p><h2 id="Orin-CAN方案回顾"><a href="#Orin-CAN方案回顾" class="headerlink" title="Orin CAN方案回顾"></a>Orin CAN方案回顾</h2><h3 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h3><p><a href="https://docs.nvidia.com/jetson/archives/r35.3.1/DeveloperGuide/text/HR/ControllerAreaNetworkCan.html#controller-area-network-can">https://docs.nvidia.com/jetson/archives/r35.3.1/DeveloperGuide/text/HR/ControllerAreaNetworkCan.html#controller-area-network-can</a></p><p>Orin的方案如下图，注意收发板，它的功能是转换为CAN H和CAN L，正是因为这个用杜邦线的板子稳定性始终是个雷，你有时候会发现主控报无人设备断联，大部分是这个原因。</p><p><img src="/images/diagram.png"></p><p>在Linux下，一般can设备是归入到以太网管理的。在内核启动CAN相关模块后，就可以通过socketCAN（一个<br>ROS包）来向实体CAN设备通信了。</p><p>但在新工控机上，你会发现输入<code>ifconfig -a</code>，一个CAN设备都找不到。</p><p><img src="/images/image-3.png"></p><h3 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h3><p>再介绍一下CANBus下的功能包。</p><p><img src="/images/image-4.png"></p><p>canbus负责CAN帧的打包，将控制指令打包后发送到话题&#x2F;sent_messages；也接收<code>/receive_messages</code>，负责CAN帧的解析，再把从主控收到的AMI指令发到<code> /res_and_ami_data</code>，这样就知道我们按车上选模式是几了。</p><p>candriver是23赛季USB-CAN用的（也就是红CAN，也叫CAN分析仪），不用管它。</p><p>socketcan_bridge是负责ROS域与CAN设备的部分。接收&#x2F;sent_message后就往CAN硬件发送了，也就是<code>topic_to_socketcan</code>，很直白明了吧。反之，收到CAN硬件的CAN帧后，就发到话题<code>/receive_messages</code>，也就是<code>socketcan_to_topic</code></p><p><img src="/images/image-6.png"></p><p>canload.sh是开机自启动，设置CAN设备用的，形如sudo ip link set can0 type can bitrate 500000这样的命令，就是对can0这样的硬件做更改。</p><p>很遗憾，上面除了canbus，其他东西在新工控机都没用了。新工控机连can0这样的设备都找不到，何谈用can相关的指令和包。</p><p>CANBUS中对从主控接收到的大量信息进行了处理，但其实真正有处理的不多。比如id859，856，535，537在Canbus中进行处理，但receive message里面找不到。</p><p>真正用到的只有AMI选任务517。</p><h2 id="新工控机CAN方案"><a href="#新工控机CAN方案" class="headerlink" title="新工控机CAN方案"></a>新工控机CAN方案</h2><p>还记得上面说的收发板吗，这玩意现在内置到工控机里面了。</p><p>在工控机的机身上，有着两个CAN接口，它的外形是DB9，也叫RS232&#x2F;RS485，它形状怎么样不要紧，因为它里面有两根针，就是CAN H和CAN L。只要这两根针接到主控，搞定。</p><p><img src="/images/image-7.png"></p><p><img src="/images/363e4f85dbee6e644e32ac1dd505255a.jpg"></p><p>那为什么你在新工控机上找不到CAN设备？<strong>因为这个机内的收发板与工控机是通过串口连接的，</strong>&#x4F60;只要往串口发CAN帧的16进制内容，收发板就会转换为CAN信号，通过那两根针出去。</p><p><img src="/images/diagram-1.png"></p><p>很简单的原理，结果被这个黑盒子一样的收发板搞得一坨。</p><h1 id="CAN知识补充"><a href="#CAN知识补充" class="headerlink" title="CAN知识补充"></a>CAN知识补充</h1><ol><li><p>CAN包括标准帧和拓展帧，我们的数据量只用到标准帧</p></li><li><p>标准帧里我们能动的有11bit数据，这里面2bit是高低位ID，比如id&#x3D;774（十进制）转换十六进制是0x306，那么这两bit就是03 06；1bit是DLC，说明后面数据的长度，比如08就是后面有8bit的数据；最后8bit就是数据了。总结：11&#x3D;2+1+8</p></li><li><p>高低位ID涉及到CAN中的仲裁，ID越小优先级越高。</p></li><li><p>（其余待补充）</p></li></ol><h1 id="新工控机CAN配置日志"><a href="#新工控机CAN配置日志" class="headerlink" title="新工控机CAN配置日志"></a>新工控机CAN配置日志</h1><p>完成serial_send.cpp节点，它会订阅&#x2F;sent_messages然后发到串口&#x2F;dev&#x2F;ttyS4（对应COM5，即CAN1）也就完成了控制数据发送到串口这一步。这里可设置的有：只发送8位数据，或是按照上面说的发11位数据；然后是波特率设置，只能在9600-57600，后面我用了19200</p><p><img src="/images/image-8.png"></p><p>完成serial_receive节点，会从&#x2F;dev&#x2F;ttyS4接收CAN数据，然后按ID分类发送到&#x2F;receive_messages。</p><h2 id="问题1：工控机发送到CAN收发仪（红CAN）得到的数据为空，红CAN发送到工控机会产生一大堆垃圾"><a href="#问题1：工控机发送到CAN收发仪（红CAN）得到的数据为空，红CAN发送到工控机会产生一大堆垃圾" class="headerlink" title="问题1：工控机发送到CAN收发仪（红CAN）得到的数据为空，红CAN发送到工控机会产生一大堆垃圾"></a>问题1：工控机发送到CAN收发仪（红CAN）得到的数据为空，红CAN发送到工控机会产生一大堆垃圾</h2><p>猜想1：这DB9的CAN线线序对吗？</p><p>验证：两个红CAN通过这根线去收发，一切正常</p><p>猜想2：工控机输出的CAN帧有问题</p><p>验证：工控机两个CAN相连，CAN1发，CAN2接收，居然也正常，我草。</p><p><img src="/images/image-9.png"></p><p>猜想3：CAN接口出来的波特率，按照厂商说的是19200，但是红CAN只能选择10K或者20K，是否有影响</p><p>验证：自定义波特率，需要计算十六进制。选择0x00FF004A，但问题依旧；两红CAN都设置19200，通讯正常。</p><p><img src="/images/image-5.png"></p><p><img src="/images/eea3cb83dda9a02b9ac0af937371a6c.png"></p><p>猜想4：CAN与串口之间可以是19200，但是CAN接口到CAN分析仪明显不能这么低的波特率。</p><p>验证：分析仪逐挡更改波特率，比如常用的500K和1000K，问题依旧。</p><p>情况就是，波特率为19200时，分析仪发送给工控机发送一帧，id&#x3D;00 03，数据为00 01 02 03 04 05 06 07，工控机串口会收到142帧相同的帧，id&#x3D;0x1047，数据是10 50 64 0C 00 00 00 00；</p><p>波特率为500K等时，发送一帧，工控机会收到几十帧ID和数据都不同的帧。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/08/22/hello-world/"/>
    <url>/2025/08/22/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! </p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
